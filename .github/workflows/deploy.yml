name: Deploy NestJS App to Docker

on:
  push:
    branches:
      - main  # 当推送到主分支时触发

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. 检查必需的 secrets 是否存在
      - name: Check if all secrets are set
        run: |
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ] || [ -z "${{ secrets.SERVER_USER }}" ] || [ -z "${{ secrets.SERVER_IP }}" ] || [ -z "${{ secrets.DEPLOY_PATH }}" ] || [ -z "${{ secrets.MYSQL_HOST }}" ] || [ -z "${{ secrets.MYSQL_USER }}" ] || [ -z "${{ secrets.MYSQL_PASSWORD }}" ] || [ -z "${{ secrets.MYSQL_DATABASE }}" ] || [ -z "${{ secrets.UPYUN_SERVICE_NAME }}" ] || [ -z "${{ secrets.UPYUN_DOMAIN_NAME }}" ] || [ -z "${{ secrets.UPYUN_OPERATOR_NAME }}" ] || [ -z "${{ secrets.UPYUN_OPERATOR_PASSWORD }}" ] || [ -z "${{ secrets.JWT_SECRET }}" ] || [ -z "${{ secrets.WE_CHAT_SECRET }}" ] || [ -z "${{ secrets.WE_CHAT_APP_ID }}" ]; then
            echo "Error: One or more required secrets are not set."
            exit 1
          else
            echo "All required secrets are set."
          fi

      # 3. 设置 Docker 环境
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 4. 构建 Docker 镜像并推送到服务器
      - name: Build and Deploy Docker Image
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          MYSQL_HOST: ${{secrets.MYSQL_HOST}}
          MYSQL_USER: ${{secrets.MYSQL_USER}}
          MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD}}
          MYSQL_DATABASE: ${{secrets.MYSQL_DATABASE}}
          UPYUN_SERVICE_NAME: ${{secrets.UPYUN_SERVICE_NAME}}
          UPYUN_DOMAIN_NAME: ${{secrets.UPYUN_DOMAIN_NAME}}
          UPYUN_OPERATOR_NAME: ${{secrets.UPYUN_OPERATOR_NAME}}
          UPYUN_OPERATOR_PASSWORD: ${{secrets.UPYUN_OPERATOR_PASSWORD}}
          JWT_SECRET: ${{secrets.JWT_SECRET}}
          WE_CHAT_SECRET: ${{secrets.WE_CHAT_SECRET}}
          WE_CHAT_APP_ID: ${{secrets.WE_CHAT_APP_ID}}

        run: |
          # 将 SSH 密钥保存到文件
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # 使用 SSH 连接到服务器
          ssh -o StrictHostKeyChecking=no -i private_key.pem $SERVER_USER@$SERVER_IP << EOF
            # 如果目录为空，先克隆 Git 仓库
            if [ ! -d "$DEPLOY_PATH/.git" ]; then
              git clone https://github.com/caicailv/go2-service.git $DEPLOY_PATH
            fi

            # 进入部署路径
            cd $DEPLOY_PATH

            # 拉取最新的代码
            git pull origin main

            # 停止并删除现有的容器
            docker-compose -f docker-compose.yml down

            # 构建 Docker 镜像
            docker-compose -f docker-compose.yml build

            # 启动 Docker 容器
            docker-compose -f docker-compose.yml up -d

            # 可选：如果你使用的是 PM2 或其他进程管理工具，也可以在这里重启它
          EOF

      # 5. 清理 SSH 密钥
      - name: Clean up SSH private key
        run: rm -f private_key.pem
